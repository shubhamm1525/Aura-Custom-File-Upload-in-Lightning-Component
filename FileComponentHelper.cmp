({

MAX_FILE_SIZE: 4500000, //Max file size 4.5 MB 
CHUNK_SIZE: 750000,      //Chunk Max size 750Kb 

uploadHelper: function(component, event, Files, label) {
         
         console.log('File inside heper :' + JSON.stringify(Files)); 
         
         var fileInput =  Files;
         // get the first file using array index[0]  
         var file = fileInput[0];
         var self = this;
        // check the selected file size, if select file size greter then MAX_FILE_SIZE,
        // then show a alert msg to user,hide the loading spinner and return from function  
         if (file.size > self.MAX_FILE_SIZE) {
             //  component.set("v.fileName", 'Alert : File size cannot exceed ' + self.MAX_FILE_SIZE + ' bytes.\n' + ' Selected file size: ' + file.size);
             component.set("v.fileName", 'Alert : File size cannot exceed 4.5 Mb' + ' Selected file size: ' + parseInt(file.size * 0.000001 - 1) + 'Mb');
             return;
         }
         // create a FileReader object 
        var objFileReader = new FileReader();
        // set onload function of FileReader object   
        objFileReader.onload = $A.getCallback(function() {
            var fileContents = objFileReader.result;
            var base64 = 'base64,';
            var dataStart = fileContents.indexOf(base64) + base64.length;
            
            fileContents = fileContents.substring(dataStart);
            // call the uploadProcess method 
            self.uploadProcess(component, file, fileContents , label);
        });
         objFileReader.readAsDataURL(file);
     },   
    
    uploadProcess: function(component, file, fileContents , label) {
        // set a default size or startpostiton as 0 
        var startPosition = 0;
        // calculate the end size or endPostion using Math.min() function which is return the min. value   
        var endPosition = Math.min(fileContents.length, startPosition + this.CHUNK_SIZE);
        // start with the initial chunk, and set the attachId(last parameter)is null in begin
        this.uploadInChunk(component, file, fileContents, startPosition, endPosition, '' , label);
    },  
     
    uploadInChunk: function(component, file, fileContents, startPosition, endPosition, attachId , label) {
        // call the apex method 'SaveFile'
         var getchunk = fileContents.substring(startPosition, endPosition);
        var action = component.get("c.SaveFile");
        action.setParams({
            parentId: component.get("v.recId"), //ID of the Created Record Saved in the Attribute recID ( created rec can be account, contact or any other custom object)
            fileName: file.name,
            base64Data: encodeURIComponent(getchunk),
            //base64Data: getchunk,
            contentType: file.type,
            fileId: attachId,
            label : label
        });
        
        // set call back 
        action.setCallback(this, function(response) {
            // store the response / Attachment Id   
            attachId = response.getReturnValue();
            
            var state = response.getState();
            if (state === "SUCCESS") {
                // update the start position with end postion
                startPosition = endPosition;
                endPosition = Math.min(fileContents.length, startPosition + this.CHUNK_SIZE);
                // check if the start postion is still less then end postion 
                // then call again 'uploadInChunk' method , 
                // else, diaply alert msg and hide the loading spinner
                if (startPosition < endPosition) {
                    this.uploadInChunk(component, file, fileContents, startPosition, endPosition, attachId,label);
                } else {
                    //  alert('File has been uploaded successfully');
                    console.log('File has been uploaded successfully');
                    console.log(attachId);
                    // var RelatedFileData = helper.getIdRelatedRecord(component, event,helper, component.get("v.recId"));
                    //console.log('RelatedFileData '+ RelatedFileData);
                }
 
            } else if (state === "INCOMPLETE") {
                // alert("From server: " + response.getReturnValue());
                console.log("From server: " + response.getReturnValue());
                var toastEvent = $A.get("e.force:showToast");
                toastEvent.setParams({
                    title : 'Info',
                    message: 'Server could not be reached. Check your internet connection',
                    duration:' 5000',
                    key: 'info_alt',
                    type: 'info',
                    mode: 'dismissible'
                });
                toastEvent.fire();
            } else if (state === "ERROR") {
                var errors = response.getError();
                if (errors) {
                    if (errors[0] && errors[0].message) {
                        console.log("Error message: " + errors[0].message);
                        
                        let errorMessage = errors[0].message;
                        errorMessage  =  errorMessage.substring(errorMessage.indexOf(",") + 1);
                        
                        var toastEvent = $A.get("e.force:showToast");
                        toastEvent.setParams({
                            title : 'Error',
                            message: errorMessage,
                            duration:' 5000',
                            type: 'error',
                            mode: 'dismissible'
                        });
                        toastEvent.fire();
                    }
                } else {
                    console.log("Unknown error");
                }
            }
        });
         $A.enqueueAction(action);
    },  

 


})
